##########################################################################################################
# 
# # –®–∞–±–ª–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–∞–∑–¥–µ–ª–∞
#                   
##########################################################################################################

import tkinter as tk
from tkinter import ttk
import os
import tkinter.messagebox as messagebox
import coding
import time
import avalanche_key 
import avalanche
import avalanche_all
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

##########################################################################################################
# 
# # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - —Å—é—Ä–ø—Ä–∏–∑ - —Å—é—Ä–∏–ø—Ä–∏–∑
#                   
##########################################################################################################
def show_main_menu():
    clear_screen()
    
    ttk.Label(root, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", style="TLabel").pack(pady=60)
    ttk.Button(root, text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ", command=show_work_menu, style="TButton").pack(pady=10)
    
    ttk.Button(root, text="–°–æ–∑–¥–∞—Ç–µ–ª–∏", command=show_creators, style="TButton").pack(pady=10)
    ttk.Button(root, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=show_about, style="TButton").pack(pady=10)
    ttk.Button(root, text="–í—ã—Ö–æ–¥", command=root.quit, style="TButton").pack(pady=10)

##########################################################################################################
# 
# # –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.
#                   –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–ª–Ω–∞ –Ω–∞ –º–µ—Ç–æ–¥–µ messagebox –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ tkinter
##########################################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –°–æ–∑–¥–∞—Ç–µ–ª–∏"
def show_creators():
    creators_message = (
        "–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢—É–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π [nioan7]\n"
        "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: [–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã]\n"
        "–ü–æ–º–æ—â—å: [–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã]\n"
        "–ú–æ—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ó–∞–≤—ã–≤–∞—é—â–∏–π –≤–µ—Ç–µ—Ä –≤ 9 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞\n\n"
        "–û—Å–æ–±–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –æ –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö –∏ –Ω–∞—É—á–∏–ª–∞ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n"
        "–ò, –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–Ω–µ—Å –≤–∫—É—Å–Ω—è—à–∫–∏ –≤ —Å–∞–º—ã–π –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç üòÑ"
    )
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö
    messagebox.showinfo("–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", creators_message)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    show_main_menu()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
def show_about():
    clear_screen()
    about_message = (
        "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DES.\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
        "1. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DES.\n"
        "2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (–±–∏–Ω–∞—Ä–Ω—ã–π, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π, –æ–±—ã—á–Ω—ã–π).\n"
        "3. –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫ –Ω–µ–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º.\n"
        "–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢—É–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π [nioan7]\n"
        "–í–µ—Ä—Å–∏—è: 1.001\n"
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024"
    )
    
    show_main_menu()   
    messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_message)


##########################################################################################################
# 
# # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#                   
##########################################################################################################
def show_work_menu():
    clear_screen()
    
    ttk.Label(root, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ó–∞–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=set_data, style="TButton").pack(pady=5)
    ttk.Button(root, text="–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", command=show_current_data, style="TButton").pack(pady=5)
    ttk.Label(root, text="–ü—Ä–æ—Ü–µ—Å—Å—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞", command=show_encrypt_decrypt, style="TButton").pack(pady=5)
    ttk.Label(root, text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", command=show_avalanche_effect, style="TButton").pack(pady=5)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_main_menu, style="TButton").pack(pady=5)

##########################################################################################################
# 
# # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
#                   
##########################################################################################################

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def get_current_data():
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    project_files_folder = os.path.join(project_folder, "project_files")
    
    text_filename = os.path.join(project_files_folder, "text_data.txt")
    key_filename = os.path.join(project_files_folder, "key_data.txt")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    if not os.path.exists(text_filename) or not os.path.exists(key_filename):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None, None, None, None

    # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    with open(text_filename, 'r') as text_file:
        text_format = text_file.readline().strip().split(": ")[1]  # –§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞
        text_data = text_file.readline().strip().split(": ")[1]     # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞

    # –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    with open(key_filename, 'r') as key_file:
        key_format = key_file.readline().strip().split(": ")[1]  # –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        key_data = key_file.readline().strip().split(": ")[1]     # –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞

    return text_format, text_data, key_format, key_data

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
def show_encrypt_decrypt():
    clear_screen()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∞

    # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    window = tk.Toplevel(root)
    window.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    ttk.Label(window, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", style="TLabel").pack(pady=10)
    

    style.configure("Small.TLabel", font=("Helvetica", 8))  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä 8

    def on_encrypt():
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        text_format, text, key_format, key = get_current_data()
        if text is None or key is None:
            return  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—ã
        if text_format == "–û–±—ã—á–Ω—ã–π":
            text_binary = text_to_binary(text)
            text_hex = text_to_hex(text)
        elif text_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            text_binary = hex_to_binary(text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ hex –≤ binary
            text_hex = text  # –£–∂–µ –≤ hex
        elif text_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            text_binary = text  # –£–∂–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ
            text_hex = binary_to_hex(text)

        if key_format == "–û–±—ã—á–Ω—ã–π":
            key_binary = text_to_binary(key)
            key_hex = text_to_hex(key)
        elif key_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            key_binary = hex_to_binary(key)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ hex –≤ binary
            key_hex = key  # –£–∂–µ –≤ hex
        elif key_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            key_binary = key  # –£–∂–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ
            key_hex = binary_to_hex(key)

    
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ttk.Label(root, text=f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (bin): {text_binary}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (hex): {text_hex}", style="Small.TLabel").pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ttk.Label(root, text=f"–¢–µ–∫—É—â–∏–π –∫–ª—é—á (bin): {key_binary}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–¢–µ–∫—É—â–∏–π –∫–ª—é—á (hex): {key_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"_____________________________________________________________", style="Small.TLabel").pack(pady=5)


        print(key_binary, len(key_binary))
        try:
            expanded_key = coding.add_parity_bits(key_binary)  # –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–ª—é—á–∞
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
            return

        start_time = time.time()
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ coding.py
        try:
            encrypted_data = coding.encrypt(text_binary, expanded_key)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return

        end_time = time.time()  # –ö–æ–Ω–µ—Ü –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        encryption_time = end_time - start_time  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(root, text=f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {encrypted_data}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–í—Ä–µ–º—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {encryption_time:.6f} —Å–µ–∫—É–Ω–¥", style="Small.TLabel").pack(pady=5)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        save_encrypted_data(encrypted_data)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª
        save_expanded_key(expanded_key)
        ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)


    def on_decrypt():
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤
        encrypted_data, expanded_key = load_encrypted_data_and_key()
        if encrypted_data is None or expanded_key is None:
            return  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ttk.Label(root, text=f"–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (bin): {encrypted_data}", style="Small.TLabel").pack(pady=5)
        encrypted_hex = binary_to_hex(encrypted_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex
        ttk.Label(root, text=f"–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (hex): {encrypted_hex}", style="Small.TLabel").pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ttk.Label(root, text=f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á (bin): {expanded_key}", style="Small.TLabel").pack(pady=5)
        key_hex = binary_to_hex(expanded_key)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex
        ttk.Label(root, text=f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á (hex): {key_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"_____________________________________________________________", style="Small.TLabel").pack(pady=5)
        # –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ coding.py

        try:
            decrypted_binary = coding.decrypt(encrypted_data, expanded_key)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ: {str(e)}")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        decrypted_text = binary_to_text(decrypted_binary)  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        decrypted_hex = binary_to_hex(decrypted_binary)  # –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
        ttk.Label(root, text=f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ–±—ã—á–Ω—ã–π): {decrypted_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (hex): {decrypted_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (bin): {decrypted_binary}", style="Small.TLabel").pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        key_hex = binary_to_hex(expanded_key)
        ttk.Label(root, text=f"–ö–ª—é—á (hex): {key_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ö–ª—é—á (bin): {expanded_key}", style="Small.TLabel").pack(pady=5)
        ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

        save_decrypted_data(decrypted_text)


    

        
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    ttk.Button(window, text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", command=lambda: [on_encrypt(), window.destroy()]).pack(pady=5)
    ttk.Button(window, text="–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞", command=lambda: [on_decrypt(), window.destroy()]).pack(pady=5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def load_encrypted_data_and_key():
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_files_folder = os.path.join(project_folder, "project_files")

    # –§–∞–π–ª—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
    encrypted_filename = os.path.join(project_files_folder, "encrypted_text.txt")
    key_filename = os.path.join(project_files_folder, "expanded_key.txt")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(encrypted_filename) or not os.path.exists(key_filename):
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        show_work_menu()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return None, None

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    with open(encrypted_filename, 'r') as file:
        encrypted_data = file.readlines()[1].strip().split(": ")[1]

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    with open(key_filename, 'r') as file:
        expanded_key = file.readlines()[1].strip().split(": ")[1]

    return encrypted_data, expanded_key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–µ
def save_encrypted_data(encrypted_data):
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_files_folder = os.path.join(project_folder, "project_files")  # –ü–∞–ø–∫–∞ project_files
    encrypted_filename = os.path.join(project_files_folder, "encrypted_text.txt")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    with open(encrypted_filename, 'w') as file:
        file.write("–§–æ—Ä–º–∞—Ç: –ë–∏–Ω–∞—Ä–Ω—ã–π\n")
        file.write(f"–î–∞–Ω–Ω—ã–µ: {encrypted_data}\n")
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", f"–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {encrypted_filename}")

def save_decrypted_data(decrypted_text):
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_files_folder = os.path.join(project_folder, "project_files")  # –ü–∞–ø–∫–∞ project_files
    decrypted_filename = os.path.join(project_files_folder, "decrypted_text.txt")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    with open(decrypted_filename, 'w') as file:
        file.write("–§–æ—Ä–º–∞—Ç: –û–±—ã—á–Ω—ã–π\n")
        file.write(f"–î–∞–Ω–Ω—ã–µ: {decrypted_text}\n")
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", f"–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {decrypted_filename}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def save_expanded_key(expanded_key):
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_files_folder = os.path.join(project_folder, "project_files")  # –ü–∞–ø–∫–∞ project_files
    key_filename = os.path.join(project_files_folder, "expanded_key.txt")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á
    with open(key_filename, 'w') as file:
        file.write("–§–æ—Ä–º–∞—Ç: –ë–∏–Ω–∞—Ä–Ω—ã–π\n")
        file.write(f"–î–∞–Ω–Ω—ã–µ: {expanded_key}\n")
    
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", f"–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {key_filename}")


##########################################################################################################
# 
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞"
#                   
##########################################################################################################

def show_avalanche_effect():
    clear_screen()
    ttk.Label(root, text="–ê–Ω–∞–ª–∏–∑ –õ–∞–≤–∏–Ω–Ω–æ–≥–æ –≠—Ñ—Ñ–µ–∫—Ç–∞", style="TLabel").pack(pady=10)

    # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ø–æ –∫–ª—é—á—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—é)
    window = tk.Toplevel(root)
    window.title("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞")

    ttk.Label(window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", style="TLabel").pack(pady=10)

    def handle_avalanche_key():
        window.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        show_key_avalanche_analysis()

    def handle_avalanche_message():
        window.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        show_message_avalanche_analysis()

    def handle_avalanche_key_and_message():
        window.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        show_key_and_message_avalanche_analysis()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    ttk.Button(window, text="–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á—É", command=handle_avalanche_key).pack(pady=5)
    ttk.Button(window, text="–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é", command=handle_avalanche_message).pack(pady=5)
    ttk.Button(window, text="–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á—É –∏ —Å–æ–æ–±—â–µ–Ω–∏—é", command=handle_avalanche_key_and_message).pack(pady=5)


    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

##########################################################################################################
# # –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
##########################################################################################################

def show_message_avalanche_analysis():
    clear_screen()

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫—Ä–∞—Ç–Ω–æ 8 —Å–∏–º–≤–æ–ª–∞–º):", style="TLabel").pack(pady=5)
    text_entry = ttk.Entry(root, width=100)
    text_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤):", style="TLabel").pack(pady=5)
    key_entry = ttk.Entry(root, width=100)
    key_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–∏—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (0-N):", style="TLabel").pack(pady=5)
    bit_position_entry = ttk.Entry(root, width=10)
    bit_position_entry.pack(pady=5)

    def run_message_avalanche_analysis():
        text = text_entry.get()
        key = key_entry.get()
        bit_position = bit_position_entry.get()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞
        if len(text) % 8 != 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 8 —Å–∏–º–≤–æ–ª–∞–º (64 –±–∏—Ç–∞).")
            return
        print(key,len(key))
        if len(key) != 7:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤ (56 –±–∏—Ç).")
            return
        if not bit_position.isdigit() or not (0 <= int(bit_position) < len(text) * 8):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç–∞.")
            return

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
        try:
            new_key = text_to_binary(key)
            new_text = text_to_binary(text)
            print(len(new_key))
            new_key = coding.add_parity_bits(new_key)
            print(new_key, len(new_key))
            comparison_table, matr = avalanche.analyze_avalanche_effect_message(new_text, new_key, int(bit_position))
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é:\n", comparison_table)
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã d1 –∏ d3
            d1, d3 = calculate_d1_d3(comparison_table, len(new_text))
            d2 = calculate_d2(matr)
            d4 = calculate_d4(matr)
            ttk.Label(root, text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", style="TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –±–∏—Ç –≤—ã—Ö–æ–¥–∞ - {d1}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - {d2}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ - {d3}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–æ–º—É –ª–∞–≤–∏–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é - {d4}", style="Small.TLabel").pack(pady=5)
            print(matr)
            
            show_graph(comparison_table)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    ttk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", command=run_message_avalanche_analysis).pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_avalanche_effect).pack(pady=10)

##########################################################################################################
# # –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É
##########################################################################################################
def show_key_avalanche_analysis():
    clear_screen()

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫—Ä–∞—Ç–Ω–æ 8 —Å–∏–º–≤–æ–ª–∞–º):", style="TLabel").pack(pady=5)
    text_entry = ttk.Entry(root, width=100)
    text_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤):", style="TLabel").pack(pady=5)
    key_entry = ttk.Entry(root, width=100)
    key_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –±–∏—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ –∫–ª—é—á–µ (0-63):", style="TLabel").pack(pady=5)
    bit_position_entry = ttk.Entry(root, width=10)
    bit_position_entry.pack(pady=5)

    def run_key_avalanche_analysis():
        text = text_entry.get()
        key = key_entry.get()
        bit_position = bit_position_entry.get()

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É
        try:
            new_key = text_to_binary(key)
            new_text = text_to_binary(text)
            print(new_key, len(new_key))
            new_key = coding.add_parity_bits(new_key)
            print(new_key, len(new_key))

            comparison_table, matr = avalanche_key.analyze_avalanche_effect_key(new_text, new_key, int(bit_position))
  
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É:\n", comparison_table)

            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã d1 –∏ d3
            d1, d3 = calculate_d1_d3(comparison_table, len(new_text))
            d2 = calculate_d2(matr)
            d4 = calculate_d4(matr)
            ttk.Label(root, text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", style="TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –±–∏—Ç –≤—ã—Ö–æ–¥–∞ - {d1}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - {d2}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ - {d3}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–æ–º—É –ª–∞–≤–∏–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é - {d4}", style="Small.TLabel").pack(pady=5)
            print(matr)
            
            show_graph(comparison_table)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    ttk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", command=run_key_avalanche_analysis).pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_avalanche_effect).pack(pady=10)

##########################################################################################################
# # –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É –∏ —Å–æ–æ–±—â–µ–Ω–∏—é
##########################################################################################################

def show_key_and_message_avalanche_analysis():
    clear_screen()

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫—Ä–∞—Ç–Ω–æ 8 —Å–∏–º–≤–æ–ª–∞–º):", style="TLabel").pack(pady=5)
    text_entry = ttk.Entry(root, width=100)
    text_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤):", style="TLabel").pack(pady=5)
    key_entry = ttk.Entry(root, width=100)
    key_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (0-N):", style="TLabel").pack(pady=5)
    bit_position_message_entry = ttk.Entry(root, width=10)
    bit_position_message_entry.pack(pady=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ –∫–ª—é—á–µ
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ –∫–ª—é—á–µ (0-63):", style="TLabel").pack(pady=5)
    bit_position_key_entry = ttk.Entry(root, width=10)
    bit_position_key_entry.pack(pady=5)

    def run_key_and_message_avalanche_analysis():
        text = text_entry.get()
        key = key_entry.get()
        bit_position_message = bit_position_message_entry.get()
        bit_position_key = bit_position_key_entry.get()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞
        if len(text) % 8 != 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 8 —Å–∏–º–≤–æ–ª–∞–º (64 –±–∏—Ç–∞).")
            return
        if len(key) != 7:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤ (56 –±–∏—Ç).")
            return
        if not bit_position_message.isdigit() or not (0 <= int(bit_position_message) < len(text) * 8):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç–∞.")
            return
        if not bit_position_key.isdigit() or not (0 <= int(bit_position_key) < 64):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –±–∏—Ç–∞ –≤ –∫–ª—é—á–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 63.")
            return

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É –∏ —Å–æ–æ–±—â–µ–Ω–∏—é
        try:
            new_key = text_to_binary(key)
            new_text = text_to_binary(text)
            new_key = coding.add_parity_bits(new_key)
            comparison_table_message, matr_message, comparison_table_key, matr_key = avalanche_all.analyze_avalanche_effect_key_and_message(new_text, new_key, int(bit_position_message), int(bit_position_key))

            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –∫–ª—é—á—É:\n", comparison_table_message, comparison_table_key)
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –∫–ª—é—á—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã d1 –∏ d3 –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
            d1_message, d3_message = calculate_d1_d3(comparison_table_message, len(new_text))
            d2_message = calculate_d2(matr_message)
            d4_message = calculate_d4(matr_message)

            d1_key, d3_key = calculate_d1_d3(comparison_table_key, len(new_text))
            d2_key = calculate_d2(matr_key)
            d4_key = calculate_d4(matr_key)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            ttk.Label(root, text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –°–æ–æ–±—â–µ–Ω–∏—è:", style="TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –±–∏—Ç –≤—ã—Ö–æ–¥–∞ - {d1_message}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - {d2_message}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ - {d3_message}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–æ–º—É –ª–∞–≤–∏–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é - {d4_message}", style="Small.TLabel").pack(pady=5)

            ttk.Label(root, text=f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ö–ª—é—á–∞:", style="TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –±–∏—Ç –≤—ã—Ö–æ–¥–∞ - {d1_key}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è - {d2_key}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ - {d3_key}", style="Small.TLabel").pack(pady=5)
            ttk.Label(root, text=f"–°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä–æ–≥–æ–º—É –ª–∞–≤–∏–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é - {d4_key}", style="Small.TLabel").pack(pady=5)

            show_graph(comparison_table_message)  # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            show_graph(comparison_table_key)      # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–ª—é—á–∞

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    ttk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", command=run_key_and_message_avalanche_analysis).pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_avalanche_effect).pack(pady=10)

##########################################################################################################
# # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
##########################################################################################################
def show_graph(comparison_table):
    # –°—É–º–º–∏—Ä—É–µ–º –æ—Ç–ª–∏—á–∏—è –ø–æ –±–ª–æ–∫–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    total_diffs = comparison_table.groupby('–†–∞—É–Ω–¥')['–í—Å–µ–≥–æ –æ—Ç–ª–∏—á–∏–π'].sum()

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    rounds = total_diffs.index  # –†–∞—É–Ω–¥—ã (1-16)
    total_diffs_values = total_diffs.values  # –ó–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞

    plt.figure(figsize=(8, 6))
    plt.plot(rounds, total_diffs_values, marker='o', linestyle='-', color='b')
    plt.title('–õ–∞–≤–∏–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏—Ç–æ–≤ –ø–æ —Ä–∞—É–Ω–¥–∞–º')
    plt.xlabel('–†–∞—É–Ω–¥')
    plt.ylabel('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤')
    plt.grid(True)
    plt.show()


def calculate_d1_d3(comparison_table, len_text):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    rounds = comparison_table['–†–∞—É–Ω–¥']
    total_diffs = comparison_table['–í—Å–µ–≥–æ –æ—Ç–ª–∏—á–∏–π']

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
    n = len(rounds)
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ (64 –¥–ª—è DES)
    m = len_text
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É –±–ª–æ–∫—É (–º–æ–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
    N = len_text/64
    print(m,N)
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ d1 (—Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö—Å—è –±–∏—Ç–æ–≤)
    d1 = total_diffs.mean()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ d3 (—Å—Ç–µ–ø–µ–Ω—å –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
    total_sum = total_diffs.sum()
    d3 = 1 - abs(total_sum) / (n * m)

    return d1, d3

def calculate_d2(a_ij_matrix):
    n, m = a_ij_matrix.shape
    num_zeros = np.sum(a_ij_matrix == 0)
    d2 = 1 - (num_zeros / (n * m))
    return d2

def calculate_d4(a_ij_matrix):
    n, m = a_ij_matrix.shape
    total_sum = np.sum(a_ij_matrix)
    N = n * m
    d4 = 1 - abs(2 * total_sum - N) / N
    return d4

##########################################################################################################
# # –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
# #         –†–∞–∑–¥–µ–ª —Å–æ –≤—Å–µ–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
#               
##########################################################################################################

def text_to_binary(text):
    return ''.join(format(ord(c), '08b') for c in text)

def text_to_hex(text):
    return ''.join(format(ord(c), '02x') for c in text).upper()

def binary_to_text(binary_data):
    return ''.join(chr(int(binary_data[i:i+8], 2)) for i in range(0, len(binary_data), 8))

def hex_to_text(hex_string):
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å "0x", –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    hex_string = hex_string.replace("0x", "")
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã
    bytes_object = bytes.fromhex(hex_string)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
    text_string = bytes_object.decode("utf-8")
    return text_string

def binary_to_hex(binary_data):
    return ''.join(format(int(binary_data[i:i+4], 2), 'x') for i in range(0, len(binary_data), 4)).upper()

def hex_to_binary(hex_string):
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å "0x", –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    hex_string = hex_string.replace("0x", "")
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∞ –∑–∞—Ç–µ–º –≤ –¥–≤–æ–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
    binary_string = bin(int(hex_string, 16))[2:]  # [2:] —É–±–∏—Ä–∞–µ—Ç "0b" –ø—Ä–µ—Ñ–∏–∫—Å
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, —á—Ç–æ–±—ã –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∞ –∫—Ä–∞—Ç–Ω–∞ 4
    padded_binary_string = binary_string.zfill(len(hex_string) * 4)
    return padded_binary_string

##########################################################################################################
# # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# #         –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ. –†–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
#               –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö  
##########################################################################################################

def show_current_data():
    clear_screen()

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    project_files_folder = os.path.join(project_folder, "project_files")
    
    text_data = ""
    key_data = ""
    text_format = ""
    key_format = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    text_filename = os.path.join(project_files_folder, "text_data.txt")
    if os.path.exists(text_filename):
        with open(text_filename, 'r') as file:
            lines = file.readlines()
            text_format = lines[0].strip().split(": ")[1]
            text_data = lines[1].strip().split(": ")[1]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º
    key_filename = os.path.join(project_files_folder, "key_data.txt")
    if os.path.exists(key_filename):
        with open(key_filename, 'r') as file:
            lines = file.readlines()
            key_format = lines[0].strip().split(": ")[1]
            key_data = lines[1].strip().split(": ")[1]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    def convert_and_show_all_formats():
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if text_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            original_text = binary_to_text(text_data)
            hex_text = binary_to_hex(text_data)
            binary_text = text_data
        elif text_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            original_text = hex_to_text(text_data)
            hex_text = text_data
            binary_text = hex_to_binary(text_data)
        else:
            original_text = text_data
            hex_text = text_to_hex(text_data)
            binary_text = text_to_binary(text_data)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        if key_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            original_key = binary_to_text(key_data)
            hex_key = hex(int(key_data, 2))[2:].upper()
            binary_key = key_data
        elif key_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            original_key = hex_to_text(key_data)
            hex_key = key_data
            binary_key = bin(int(key_data, 16))[2:].zfill(56)
        else:
            original_key = key_data
            hex_key = text_to_hex(key_data)
            binary_key = text_to_binary(key_data)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π: {original_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π: {hex_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {binary_text}", style="Small.TLabel").pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–∞
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π –∫–ª—é—á:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π: {original_key}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π: {hex_key}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {binary_key}", style="Small.TLabel").pack(pady=5)
    convert_and_show_all_formats()

    def convert_encrypt():
        current_directory = os.path.dirname(os.path.abspath(__file__))
        encrypted_data_file = os.path.join(current_directory, "project_files", "encrypted_text.txt")
        expanded_key_file = os.path.join(current_directory, "project_files", "expanded_key.txt")

        if not os.path.exists(encrypted_data_file) or not os.path.exists(expanded_key_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ß—Ç–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        with open(encrypted_data_file, 'r') as file:
            encrypted_data = file.readlines()[1].strip().split(": ")[1]

        with open(expanded_key_file, 'r') as file:
            expanded_key = file.readlines()[1].strip().split(": ")[1]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
        encrypted_text = binary_to_text(encrypted_data)
        encrypted_hex = binary_to_hex(encrypted_data)
            
        key_text = binary_to_text(expanded_key)
        key_hex = binary_to_hex(expanded_key)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –ø–µ—Ä–µ–¥ –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {encrypted_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π: {encrypted_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {encrypted_data}", style="Small.TLabel").pack(pady=5)

        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π –∫–ª—é—á:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {key_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π: {key_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {expanded_key}", style="Small.TLabel").pack(pady=5) 
    convert_encrypt()   
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

    note = ("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.")
    ttk.Label(root, text=note, style="Small.TLabel", anchor="center").pack(side="bottom", pady=20)


##########################################################################################################
# # –†–∞–∑–¥–µ–ª –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
# #         –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º DES
#               –£—Å–ª–æ–≤–∏—è: –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ - —Å—Ç—Ä–æ–≥–æ 64 –±–∏—Ç–∞, –∫–ª—é—á - —Å—Ç—Ä–æ–≥–æ 56 –±–∏—Ç
#               –í–∫–ª—é—á–µ–Ω–∞: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
##########################################################################################################

# –û–±—â–µ–µ –º–µ–Ω—é –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±—ã—á–Ω—ã—Ö
def set_data():
    clear_screen()
    
    # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    window = tk.Toplevel(root)
    window.title("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
    
    ttk.Label(window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö", style="TLabel").pack(pady=10)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def handle_regular_data():
        window.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞:", style="TLabel", anchor="center").pack(pady=5)
        text_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π", "–û–±—ã—á–Ω—ã–π"], state="readonly")
        text_format.pack(pady=5)
        text_format.current(2)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û–±—ã—á–Ω—ã–π"

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞:", style="TLabel", anchor="center").pack(pady=5)
        text_entry = ttk.Entry(root, width=100)
        text_entry.pack(pady=5)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
        ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:", style="TLabel", anchor="center").pack(pady=5)
        key_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π", "–û–±—ã—á–Ω—ã–π"], state="readonly")
        key_format.pack(pady=5)
        key_format.current(1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π"

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:", style="TLabel", anchor="center").pack(pady=5)
        key_entry = ttk.Entry(root, width=100)
        key_entry.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        ttk.Button(root, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", style="TButton", command=lambda: save_data(text_entry, text_format, key_entry, key_format)).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ–Ω—é
        ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)
        note = ("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤, 16 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏–ª–∏ 64 –±–∏—Ç–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ö–ª—é—á: —Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤, 14 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏–ª–∏ 56 –±–∏—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        ttk.Label(root, text=note, style="Small.TLabel", anchor="center").pack(side="bottom", pady=20)


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    def handle_encrypted_data():
        window.destroy()

        current_directory = os.path.dirname(os.path.abspath(__file__))
        encrypted_data_file = os.path.join(current_directory, "project_files", "encrypted_text.txt")
        expanded_key_file = os.path.join(current_directory, "project_files", "expanded_key.txt")

        if not os.path.exists(encrypted_data_file) or not os.path.exists(expanded_key_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ß—Ç–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        with open(encrypted_data_file, 'r') as file:
            encrypted_data = file.readlines()[1].strip().split(": ")[1]

        with open(expanded_key_file, 'r') as file:
            expanded_key = file.readlines()[1].strip().split(": ")[1]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
        encrypted_text = binary_to_text(encrypted_data)
        encrypted_hex = binary_to_hex(encrypted_data)
        
        key_text = binary_to_text(expanded_key)
        key_hex = binary_to_hex(expanded_key)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –ø–µ—Ä–µ–¥ –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {encrypted_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π: {encrypted_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {encrypted_data}", style="Small.TLabel").pack(pady=5)

        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π –∫–ª—é—á:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {key_text}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π: {key_hex}", style="Small.TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {expanded_key}", style="Small.TLabel").pack(pady=5)


        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(root, text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):", style="TLabel").pack(pady=5)
        encrypted_entry = ttk.Entry(root, width=100)
        encrypted_entry.insert(0, encrypted_data)
        encrypted_entry.pack(pady=5)

        ttk.Label(root, text="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):", style="TLabel").pack(pady=5)
        key_entry = ttk.Entry(root, width=100)
        key_entry.insert(0, expanded_key)
        key_entry.pack(pady=5)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", style="TLabel").pack(pady=5)
        text_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π", "–û–±—ã—á–Ω—ã–π"], state="readonly")
        text_format.pack(pady=5)
        text_format.current(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ë–∏–Ω–∞—Ä–Ω—ã–π"

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
        ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:", style="TLabel").pack(pady=5)
        key_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π", "–û–±—ã—á–Ω—ã–π"], state="readonly")
        key_format.pack(pady=5)
        key_format.current(0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ë–∏–Ω–∞—Ä–Ω—ã–π"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        ttk.Button(root, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=lambda: save_encrypted_dataset(encrypted_entry, key_entry, text_format, key_format), style="TButton").pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ –º–µ–Ω—é
        ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

        note = ("–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤, 16 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏–ª–∏ 64 –±–∏—Ç–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ö–ª—é—á: —Ä–æ–≤–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤, 16 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏–ª–∏ 64 –±–∏—Ç–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        ttk.Label(root, text=note, style="Small.TLabel", anchor="center").pack(side="bottom", pady=20)
    
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    ttk.Button(window, text="–û–±—ã—á–Ω—ã–µ", command=lambda: [handle_regular_data(), window.destroy()]).pack(pady=5)
    ttk.Button(window, text="–®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ", command=lambda: [handle_encrypted_data(), window.destroy()]).pack(pady=5)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def save_encrypted_dataset(encrypted_entry, key_entry, text_format, key_format):
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    current_directory = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_files_folder = os.path.join(current_directory, "project_files")  # –ü–∞–ø–∫–∞ project_files
    encrypted_filename = os.path.join(project_files_folder, "encrypted_text.txt")
    key_filename = os.path.join(project_files_folder, "expanded_key.txt")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    encrypted_data = encrypted_entry.get()
    expanded_key = key_entry.get()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    if text_format.get() == "–û–±—ã—á–Ω—ã–π":
        encrypted_binary = text_to_binary(encrypted_data)
    elif text_format.get() == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
        encrypted_binary = hex_to_binary(encrypted_data)
    elif text_format.get() == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
        encrypted_binary = encrypted_data

    if key_format.get() == "–û–±—ã—á–Ω—ã–π":
        key_binary = text_to_binary(expanded_key)
    elif key_format.get() == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
        key_binary = hex_to_binary(expanded_key)
    elif key_format.get() == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
        key_binary = expanded_key

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    with open(encrypted_filename, 'w') as file:
        file.write("–§–æ—Ä–º–∞—Ç: –ë–∏–Ω–∞—Ä–Ω—ã–π\n")
        file.write(f"–î–∞–Ω–Ω—ã–µ: {encrypted_binary}\n")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    with open(key_filename, 'w') as file:
        file.write("–§–æ—Ä–º–∞—Ç: –ë–∏–Ω–∞—Ä–Ω—ã–π\n")
        file.write(f"–î–∞–Ω–Ω—ã–µ: {key_binary}\n")
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:\n{encrypted_filename} –∏ {key_filename}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫ –≤ –≤–∏–¥–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
def save_data(text_entry, text_format, key_entry, key_format):
    text = text_entry.get()
    text_format_selected = text_format.get()
    key = key_entry.get()
    key_format_selected = key_format.get()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if text_format_selected == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
        if len(text) != 64:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 64 –±–∏—Ç–∞.")
            return
    elif text_format_selected == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
        if len(text) != 16:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    elif text_format_selected == "–û–±—ã—á–Ω—ã–π":
        if len(text) != 8:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if key_format_selected == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
        if len(key) != 56:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 64 –±–∏—Ç–∞.")
            return
    elif key_format_selected == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
        if len(key) != 14:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª—é—á –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    elif key_format_selected == "–û–±—ã—á–Ω—ã–π":
        if len(key) != 7:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 7 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    project_files_folder = os.path.join(project_folder, "project_files")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(project_files_folder):
        os.makedirs(project_files_folder)

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á –≤ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        text_filename = os.path.join(project_files_folder, "text_data.txt")
        with open(text_filename, 'w') as file:
            file.write(f"–§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: {text_format_selected}\n")
            file.write(f"–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞: {text}\n")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {text_filename}.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª
        key_filename = os.path.join(project_files_folder, "key_data.txt")
        with open(key_filename, 'w') as file:
            file.write(f"–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {key_format_selected}\n")
            file.write(f"–î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞: {key}\n")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {key_filename}.")

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        return


##########################################################################################################
# 
# # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
#                   
##########################################################################################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
def clear_screen():
    for widget in root.winfo_children():
        widget.pack_forget()

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É DES")
root.geometry("800x700")
root.configure(bg="#ADD8E6")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ttk —Å—Ç–∏–ª–µ–π
style = ttk.Style()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –º–µ—Ç–æ–∫
style.configure("TButton", font=("Helvetica", 12), padding=10, background="#444444", foreground="black")
style.configure("TLabel", font=("Helvetica", 12), background="#ADD8E6", foreground="black")
style.configure("Small.TLabel", font=("Helvetica", 8), background="#ADD8E6", foreground="black")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
print(hex_to_text('52455055424C4943'))
show_main_menu()
root.mainloop()
