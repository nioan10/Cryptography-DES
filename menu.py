import tkinter as tk
from tkinter import ttk
import os
import tkinter.messagebox as messagebox

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu():
    clear_screen()
    
    ttk.Label(root, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", style="TLabel").pack(pady=60)
    ttk.Button(root, text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ", command=show_work_menu, style="TButton").pack(pady=10)
    
    ttk.Button(root, text="–°–æ–∑–¥–∞—Ç–µ–ª–∏", command=show_creators, style="TButton").pack(pady=10)
    ttk.Button(root, text="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=show_about, style="TButton").pack(pady=10)
    ttk.Button(root, text="–í—ã—Ö–æ–¥", command=root.quit, style="TButton").pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–°–æ–∑–¥–∞—Ç–µ–ª–∏"
def show_creators():
    creators_message = (
        "–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢—É–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π\n"
        "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: –®–æ–º–ø–æ–ª–æ–≤ –ú–∞–∫—Å–∏–º\n"
        "–ü–æ–º–æ—â—å: –ß–∏—Å—Ç—è–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞\n"
        "–ú–æ—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ó–∞–≤—ã–≤–∞—é—â–∏–π –≤–µ—Ç–µ—Ä –≤ 9 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞\n\n"
        "–û—Å–æ–±–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –æ –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö –∏ –Ω–∞—É—á–∏–ª–∞ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n"
        "–ò, –∫–æ–Ω–µ—á–Ω–æ, —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–Ω–µ—Å –≤–∫—É—Å–Ω—è—à–∫–∏ –≤ —Å–∞–º—ã–π –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç üòÑ"
    )
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö
    messagebox.showinfo("–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", creators_message)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    show_main_menu()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
def show_about():
    clear_screen()
    about_message = (
        "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DES.\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
        "1. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ DES.\n"
        "2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (–±–∏–Ω–∞—Ä–Ω—ã–π, —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π, –æ–±—ã—á–Ω—ã–π).\n"
        "3. –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫ –Ω–µ–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º.\n"
        "–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: –¢—É–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π\n"
        "–í–µ—Ä—Å–∏—è: 0.999\n"
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2024"
    )
    
    show_main_menu()   
    messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–∞–∑–¥–µ–ª—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ"
def show_work_menu():
    clear_screen()
    
    ttk.Label(root, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ó–∞–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=set_data, style="TButton").pack(pady=5)
    ttk.Button(root, text="–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", command=show_current_data, style="TButton").pack(pady=5)
    ttk.Label(root, text="–ü—Ä–æ—Ü–µ—Å—Å—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–®–∏—Ñ—Ä–æ–≤–∫–∞", command=show_encrypt, style="TButton").pack(pady=5)
    ttk.Button(root, text="–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞", command=show_decrypt, style="TButton").pack(pady=5)
    ttk.Label(root, text="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", command=show_avalanche_effect, style="TButton").pack(pady=5)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_main_menu, style="TButton").pack(pady=5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–®–∏—Ñ—Ä–æ–≤–∫–∞"
def show_encrypt():
    clear_screen()
    ttk.Label(root, text="–†–∞–∑–¥–µ–ª –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞"
def show_decrypt():
    clear_screen()
    ttk.Label(root, text="–†–∞–∑–¥–µ–ª –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞"
def show_avalanche_effect():
    clear_screen()
    ttk.Label(root, text="–†–∞–∑–¥–µ–ª –ê–Ω–∞–ª–∏–∑ –ª–∞–≤–∏–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞", style="TLabel").pack(pady=10)
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def text_to_binary(text):
    return ''.join(format(ord(c), '08b') for c in text)

def text_to_hex(text):
    return ''.join(format(ord(c), '02x') for c in text).upper()

def binary_to_text(binary_data):
    return ''.join(chr(int(binary_data[i:i+8], 2)) for i in range(0, len(binary_data), 8))

def hex_to_text(hex_data):
    return ''.join(chr(int(hex_data[i:i+2], 16)) for i in range(0, len(hex_data), 2))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á)
def show_current_data():
    clear_screen()

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    project_files_folder = os.path.join(project_folder, "project_files")
    
    text_data = ""
    key_data = ""
    text_format = ""
    key_format = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    text_filename = os.path.join(project_files_folder, "text_data.txt")
    if os.path.exists(text_filename):
        with open(text_filename, 'r') as file:
            lines = file.readlines()
            text_format = lines[0].strip().split(": ")[1]
            text_data = lines[1].strip().split(": ")[1]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º
    key_filename = os.path.join(project_files_folder, "key_data.txt")
    if os.path.exists(key_filename):
        with open(key_filename, 'r') as file:
            lines = file.readlines()
            key_format = lines[0].strip().split(": ")[1]
            key_data = lines[1].strip().split(": ")[1]
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    def convert_and_show_all_formats():
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if text_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            original_text = binary_to_text(text_data)
            hex_text = hex(int(text_data, 2))[2:].upper()
            binary_text = text_data
        elif text_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            original_text = hex_to_text(text_data)
            hex_text = text_data
            binary_text = bin(int(text_data, 16))[2:].zfill(64)
        else:
            original_text = text_data
            hex_text = text_to_hex(text_data)
            binary_text = text_to_binary(text_data)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        if key_format == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
            original_key = binary_to_text(key_data)
            hex_key = hex(int(key_data, 2))[2:].upper()
            binary_key = key_data
        elif key_format == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
            original_key = hex_to_text(key_data)
            hex_key = key_data
            binary_key = bin(int(key_data, 16))[2:].zfill(56)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–û–±—ã—á–Ω—ã–π: {original_text}", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π: {hex_text}", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {binary_text}", style="TLabel").pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–∞
        ttk.Label(root, text="–¢–µ–∫—É—â–∏–π –∫–ª—é—á:", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π: {hex_key}", style="TLabel").pack(pady=5)
        ttk.Label(root, text=f"–ë–∏–Ω–∞—Ä–Ω—ã–π: {binary_key}", style="TLabel").pack(pady=5)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –≤–æ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    convert_and_show_all_formats()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)




def set_data():
    clear_screen()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞:", style="TLabel", anchor="center").pack(pady=5)
    text_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π", "–û–±—ã—á–Ω—ã–π"], state="readonly")
    text_format.pack(pady=5)
    text_format.current(2)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–û–±—ã—á–Ω—ã–π"

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞:", style="TLabel", anchor="center").pack(pady=5)
    text_entry = ttk.Entry(root, width=50)
    text_entry.pack(pady=5)

    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
    ttk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:", style="TLabel", anchor="center").pack(pady=5)
    key_format = ttk.Combobox(root, values=["–ë–∏–Ω–∞—Ä–Ω—ã–π", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π"], state="readonly")
    key_format.pack(pady=5)
    key_format.current(1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π"

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
    ttk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:", style="TLabel", anchor="center").pack(pady=5)
    key_entry = ttk.Entry(root, width=50)
    key_entry.pack(pady=5)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    ttk.Button(root, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", style="TButton", command=lambda: save_data(text_entry, text_format, key_entry, key_format)).pack(pady=10)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ–Ω—é
    ttk.Button(root, text="–ù–∞–∑–∞–¥", command=show_work_menu, style="TButton").pack(pady=10)
    
    # –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–∏–∑—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    note = ("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 64 –±–∏—Ç–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞, –∏–ª–∏ 16 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ö–ª—é—á: —Å—Ç—Ä–æ–≥–æ 56 –±–∏—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º, 7 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∏–ª–∏ 14 –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    ttk.Label(root, text=note, style="Small.TLabel", anchor="center").pack(side="bottom", pady=20)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫ –≤ –≤–∏–¥–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
def save_data(text_entry, text_format, key_entry, key_format):
    text = text_entry.get()
    text_format_selected = text_format.get()
    key = key_entry.get()
    key_format_selected = key_format.get()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if text_format_selected == "–ë–∏–Ω–∞—Ä–Ω—ã–π":
        if len(text) != 64:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 64 –±–∏—Ç–∞.")
            return
    elif text_format_selected == "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π":
        if len(text) != 16:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
    elif text_format_selected == "–û–±—ã—á–Ω—ã–π":
        if len(text) != 8:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_folder = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    project_files_folder = os.path.join(project_folder, "project_files")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(project_files_folder):
        os.makedirs(project_files_folder)

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á –≤ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
        text_filename = os.path.join(project_files_folder, "text_data.txt")
        with open(text_filename, 'w') as file:
            file.write(f"–§–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: {text_format_selected}\n")
            file.write(f"–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞: {text}\n")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {text_filename}.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª
        key_filename = os.path.join(project_files_folder, "key_data.txt")
        with open(key_filename, 'w') as file:
            file.write(f"–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {key_format_selected}\n")
            file.write(f"–î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞: {key}\n")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª {key_filename}.")

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        return


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
def clear_screen():
    for widget in root.winfo_children():
        widget.pack_forget()

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É DES")
root.geometry("800x500")
root.configure(bg="#ADD8E6")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ttk —Å—Ç–∏–ª–µ–π
style = ttk.Style()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –º–µ—Ç–æ–∫
style.configure("TButton", font=("Helvetica", 12), padding=10, background="#444444", foreground="black")
style.configure("TLabel", font=("Helvetica", 12), background="#ADD8E6", foreground="black")
style.configure("Small.TLabel", font=("Helvetica", 8), background="#ADD8E6", foreground="black")



# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
show_main_menu()
root.mainloop()
